/**
 * User Profile
 * This is a sample for User Profile.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: ila.kalyani@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.2.3
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Transaction'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Transaction'));
  } else {
    // Browser globals (root is window)
    if (!root.UserProfile) {
      root.UserProfile = {};
    }
    root.UserProfile.UserTransactionsApi = factory(root.UserProfile.ApiClient, root.UserProfile.Transaction);
  }
}(this, function(ApiClient, Transaction) {
  'use strict';

  /**
   * UserTransactions service.
   * @module api/UserTransactionsApi
   * @version 1.0.0
   */

  /**
   * Constructs a new UserTransactionsApi. 
   * @alias module:api/UserTransactionsApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the getUserTransaction operation.
     * @callback module:api/UserTransactionsApi~getUserTransactionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Transaction} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get an existing user single transaction
     * 
     * @param {String} transactionid User transaction id 
     * @param {module:api/UserTransactionsApi~getUserTransactionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Transaction}
     */
    this.getUserTransaction = function(transactionid, callback) {
      var postBody = null;

      // verify the required parameter 'transactionid' is set
      if (transactionid === undefined || transactionid === null) {
        throw new Error("Missing the required parameter 'transactionid' when calling getUserTransaction");
      }


      var pathParams = {
        'transactionid': transactionid
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['user_auth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Transaction;

      return this.apiClient.callApi(
        '/transaction/{transactionid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getUserTransactions operation.
     * @callback module:api/UserTransactionsApi~getUserTransactionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Transaction} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get an existing user transactions list
     * 
     * @param {module:api/UserTransactionsApi~getUserTransactionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Transaction}
     */
    this.getUserTransactions = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['user_auth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Transaction;

      return this.apiClient.callApi(
        '/transactions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
